import sdl2
import io
import gl
import vector
import vector_literals:*
import window
import keylistener
import shader
import fileio
//import string
import object

fun main() : int {

    var winName : *char = "SQUID PONG"
    var win : window::gameWindow
    var res : int = win.create(640, 480, winName)

    gl::glewinit()

    var listener : keylistener::keylistener
    var done : int = 0

    var s : shader::shader
    s.compile()
    s.enable()

    var paddle1 : object::gameObject
    var paddle2 : object::gameObject
    var pong : object::gameObject
    initGameObjs(&paddle1,&paddle2,&pong,&s)

    //Game State Vars
    var redpoints : int = 0
    var bluepoints : int = 0
    var dirx : int
    var diry : int
    var reset : bool = true

    io::println("===Score====")
    //Game Loop!!!
    while(!done) {
        /*
         * Check for keypresses
         */
        listener.poll(&done)
        var res : int = listener.getPressP1()
        if(res == 1) {
            //io::println("User1 Pressed UP!!!")
            paddle2.moveUp()
        } else if (res == 2) {
            //io::println("User1 Pressed DOWN!!!")
            paddle2.moveDown()
        }
        res = listener.getPressP2()
        if(res == 1) {
            //io::println("User2 Pressed W!!!")
            paddle1.moveUp()
        } else if (res == 2) {
            //io::println("User2 Pressed S!!!")
            paddle1.moveDown()
        }

        /*
         * Apply Update Position/Check for win conditions
         */
        //FIXME TODO!!!
        //Someone just scored, reset delta vec
        if(reset) {
            io::print("Red: ")
            io::print(redpoints)
            io::print(" Blue: ")
            io::print(bluepoints)
            io::print("\n")

            reset = false
            dirx = rand()
            diry = rand()
            var f : float = 0.0
            if(dirx){
                f = 0.02
            } else {
                f = -0.02
            }
            pong.d[0] = f
            if(diry){
                f = 0.02
            } else {
                f = -0.02
            }
            pong.d[1] = f
        }

        //check for scoring
        var temp : float = -1.02
        if(pong.d[0] <= temp) {
            bluepoints += 1
            reset = true
        } else if(pong.d[0] >= -temp) {
            redpoints += 1
            reset = true
        } else {
            //check collisions with upper/lower boundaries
            temp = -0.98
            if(pong.d[1] <= temp) {
                pong.d[1] = temp
                diry = 1
            } else if(pong.d[1] >= -temp) {
                pong.d[1] = -temp
                diry = 0
            }
            //check collisions with paddles
            //TODO
        }

        //Update delta vec
        temp = 0.02
        if(diry) {
            pong.d[1] = pong.d[1] + temp
        } else {
            pong.d[1] = pong.d[1] - temp
        }
        if(dirx) {
            pong.d[0] = pong.d[0] + temp
        } else {
            pong.d[0] = pong.d[0] - temp
        }

        /*
         * Render game objects
         */
        gl::clear(gl::COLOR_BUFFER_BIT)
        paddle1.render()
        paddle2.render()
        pong.render()

        sdl2::gl_swapwindow(win.screen)
    }

    io::println("Time to clean up!!")

    s.disable()

    io::println("All done. It Worked!!!!!")
    io::println("===Final Score===")
    io::print("Red: ")
    io::print(redpoints)
    io::print(" Blue: ")
    io::print(bluepoints)
    io::print("\n")
    return 0
}


fun initGameObjs(obj1 : *object::gameObject, obj2 : *object::gameObject, ball : *object::gameObject, s : *shader::shader) {
    var f1 : float = 0.3
    var f2 : float = 0.9
    var f3 : float = 0.05
    var f4 : float = 0.0
    var f5 : float = 1.0
    var f6 : float = 0.02

    var triVerts = vector(-f2, -f1, -f2+f3, -f1, -f2+f3, f1, -f2, f1)

    obj1->construct(s)
    obj1->setPos(triVerts)
    obj1->setColor(f5,f4,f4)

    triVerts[0] = f2
    triVerts[2] = f2-f3
    triVerts[4] = f2-f3
    triVerts[6] = f2

    obj2->construct(s)
    obj2->setPos(triVerts)
    obj2->setColor(f4,f4,f5)

    triVerts = vector(f4-f6, f4-f6, f4+f6, f4-f6, f4+f6, f4+f6, f4-f6, f4+f6)

    ball->construct(s)
    ball->setPos(triVerts)
    ball->setColor(f4,f5,f4)

}

fun readSettings() {

   /*
    var fp : FILE* = fileio::fopen("settings.txt","r")
    var s1 = string::string("abc").toCharArray()
    var s2 = string::string("0123456789").toCharArray()
    var readCount = fileio::fscanf(fp, "%s %s", s1, s2)

    io::println(s1)
    io::println(s2)
    */

}

fun rand() : int {
    __if_comp__ __C__ {
    simple_passthrough """
    return rand()%2;
    """
    }
    return 0
}
