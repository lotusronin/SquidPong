import gl
import io
import string

obj shader {
    var vertsrc : string::string
    var fragsrc : string::string
    var vshad : int
    var fshad : int
    var prog : int

    fun compile() : void {
        io::println("Preparing to compile shader")
        vertsrc = string::string("")
        fragsrc = string::string("")
        
        //Need multiline strings!!!
        vertsrc = """
        #version 120
        attribute vec2 pos 
        void main() {
        gl_Position.xyz = vec3(pos, 0.0);
        gl_Position.w = 1.0;}
        """

        fragsrc = """
        #version 120
        void main() {
        gl_FragColor = vec3(1.0, 0.0, 0.0, 1.0);}
        """
        //End of need for multiline strings!!!
        
        io::println("creating shaders")
        //GL_VERTEX_SHADER = 35633
        //GL_FRAGMENT_SHADER = 35632
        vshad = gl::createshader(gl::VERTEX_SHADER)
        fshad = gl::createshader(gl::FRAGMENT_SHADER)
        
        io::println("setting shader source")
        var vs : char* = vertsrc.toCharArray()
        var fs : char* = fragsrc.toCharArray()
        
        var null : int* = 0
        gl::shadersource(vshad, 1, &vs, null)
        gl::shadersource(fshad, 1, &fs, null)
        
        io::println("compiling shader source")
        io::println("compiling vertex shader")
        gl::compileshader(vshad)
        io::println("compiling fragment shader")
        gl::compileshader(fshad)

        //Skip error checking cus I like to live dangerously :D
        
        io::println("creating program")
        prog = gl::createprogram()
        gl::attachshader(prog, vshad)
        gl::attachshader(prog, fshad)
        
        io::println("Linking program")
        gl::linkprogram(prog)
        return
    }

    fun enable() : void {
        gl::useprogram(prog)
    }

    fun disable() {
        gl::useprogram(0)
    }
}
