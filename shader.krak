import gl
import io
import string
import vector
import mem

obj shader {
    var vertsrc : string::string
    var fragsrc : string::string
    var vshad : int
    var fshad : int
    var prog : int

    fun compile() : void {
        io::println("Preparing to compile shader")
        vertsrc.construct()
        fragsrc.construct()
        
        //Need multiline strings!!!
        vertsrc = """
        #version 120
        attribute vec2 pos;
        uniform vec3 delta;
        void main() {
        vec2 vpos = pos;
        vpos.x = vpos.x + delta.x;
        vpos.y = vpos.y + delta.y;
        gl_Position = gl_ProjectionMatrix*gl_ModelViewMatrix*vec4(vpos, 0.0, 1.0);
        }
        """

        fragsrc = """
        #version 120
        uniform vec3 col;
        void main() {
        gl_FragColor = vec4(col, 1.0);
        }
        """
        //End of need for multiline strings!!!
        
        io::println("creating shaders")
        //GL_VERTEX_SHADER = 35633
        //GL_FRAGMENT_SHADER = 35632
        vshad = gl::createshader(gl::VERTEX_SHADER)
        fshad = gl::createshader(gl::FRAGMENT_SHADER)
        
        io::println("setting shader source")
        var vs : *char = vertsrc.toCharArray()
        var fs : *char = fragsrc.toCharArray()
        
        var null : *int = 0
        gl::shadersource(vshad, 1, &vs, null)
        gl::shadersource(fshad, 1, &fs, null)
        
        io::println("compiling shader source")
        io::println("compiling vertex shader")
        gl::compileshader(vshad)
        io::println("compiling fragment shader")
        gl::compileshader(fshad)

        //Skip error checking cus I like to live dangerously :D
        //Except not cus it isn't working :C

        var errorBuff.construct() : vector::vector<char>
        errorBuff.resize(1024)
        var error : int
        
        io::println("Checking for vshader errors")
        gl::getshaderiv(vshad,gl::COMPILE_STATUS,&error)
        if(error == gl::FALSE) {
            gl::getshaderinfolog(vshad,1024,errorBuff.data)
            io::print(errorBuff.data)
        }
        
        io::println("Checking for vshader errors")
        gl::getshaderiv(fshad,gl::COMPILE_STATUS,&error)
        if(error == gl::FALSE) {
            gl::getshaderinfolog(fshad,1024,errorBuff.data)
            io::print(errorBuff.data)
        }
        
        io::println("creating program")
        prog = gl::createprogram()
        gl::attachshader(prog, vshad)
        gl::attachshader(prog, fshad)

        io::println("binding attribute locations")
        gl::bindattriblocation(prog, 0, "pos")
        //gl::bindattriblocation(prog, 1, "col")
        
        io::println("Linking program")
        gl::linkprogram(prog)
        gl::detachshader(prog, vshad)
        gl::detachshader(prog, fshad)
        gl::deleteshader(vshad)
        gl::deleteshader(fshad)

        //memory leack check
        vertsrc.destruct()
        fragsrc.destruct()
        mem::free<char>(vs)
        mem::free<char>(fs)

        
        return
    }

    fun enable() : void {
        gl::useprogram(prog)
        gl::enablevertexattribarray(0)
        gl::enablevertexattribarray(1)
    }

    fun disable() {
        gl::useprogram(0)
    }

    fun destruct() {
        gl::deleteprogram(prog)
    }
}
