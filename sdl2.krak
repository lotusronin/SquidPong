import mem
#link("SDL2")

/*
 * Some Global flags!!
 */
var SCANCODE_W : int = 26
var SCANCODE_S : int = 22
var SCANCODE_UP : int = 82
var SCANCODE_DOWN : int = 81

var SDL_INIT_VIDEO : uint = 32u
var SDL_GL_CONTEXT_MAJOR_VERSION : uint = 17u
var SDL_GL_CONTEXT_MINOR_VERSION : uint = 18u
var SDL_GL_DOUBLEBUFFER : uint = 5u
var SDL_GL_DEPTH_SIZE : uint = 6u
var SDL_WINDOWPOS_UNDEFINED : uint = 536805376u
var SDL_WINDOW_SHOWN : uint = 4u
var SDL_WINDOW_OPENGL : uint = 2u
var SDL_QUIT : uint = 256u
var SDL_KEYDOWN : uint = 768u
var SDL_SCANCODE_ESCAPE : uint = 41u
/*
 * End flags!!!
 */
ext fun SDL_Init(i:uint): int 
fun init_video() : int
    SDL_Init(SDL_INIT_VIDEO)

ext fun SDL_Quit()
fun quit()
    SDL_Quit()

ext fun SDL_GL_SetAttribute(enum: uint, value: int)
fun gl_setattributes(major : int, minor : int, dbuff : int, depth : int) {
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, major)
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, minor)
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, dbuff)
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, depth)
}

ext fun SDL_CreateWindow(name : *char, a: uint, b: uint, width : int, height : int, mask: uint) : *void
fun createwindow(name : *char, width : int, height : int) : *void {
        return SDL_CreateWindow(name, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
        width, height, SDL_WINDOW_SHOWN | SDL_WINDOW_OPENGL)
}

ext fun SDL_GL_CreateContext(screen : *void) : *void
fun gl_createcontext(screen : *void) : *void
    return SDL_GL_CreateContext(screen)

ext fun SDL_GL_DeleteContext(context : *void)
fun gl_deletecontext(context : *void)
    SDL_GL_DeleteContext(context)

ext fun SDL_DestroyWindow(screen : *void)
fun destroywindow(screen : *void)
    SDL_DestroyWindow(screen)

ext fun SDL_GL_SwapWindow(screen : *void)
fun gl_swapwindow(screen : *void)
    SDL_GL_SwapWindow(screen)

ext fun SDL_GetKeyboardState(something: *void) : *void
fun getkeyboardstate() : *void
    return SDL_GetKeyboardState((0) cast *void)

var event: *uint
ext fun SDL_PollEvent(should_be_struct_ptr: *void) : int
fun pollevent() : int {
    if (!event)
        event = mem::new<uint>(100) // just guess at how big the struct would be! 0.0
    return SDL_PollEvent((event) cast *void)
}

fun checkEvent(keys : *void) : int {
    // event would be the first uint8 in the struct, so :/
    if (*event == SDL_QUIT) {
            return 1;
    } else if (*event == SDL_KEYDOWN) {
        if( ((keys) cast *uchar)[SDL_SCANCODE_ESCAPE]) {
            return 1;
        }
    }
    return 0
}

fun checkPlayerKeys(keys : *void, k1 : int, k2 : int) : int {
    if ( ((keys) cast *uchar)[k1]) {
        return 1;
    } else if ( ((keys) cast *uchar)[k2]) {
        return 2;
    }
    return 0
}

ext fun SDL_GetTicks() : int
fun getticks() : int
    return SDL_GetTicks()

ext fun SDL_Delay(t : int)
fun delay(t : int)
    SDL_Delay(t)
