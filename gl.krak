__if_comp__ __C__ simple_passthrough(::"-lGL -lGLEW") """
    #include <GL/glew.h>
    #include <GL/gl.h>
"""

//**********
//WOO top-level vars!!!
//Begin constants
//**********

var COLOR_BUFFER_BIT : int = 16384
var BLEND : int = 3042
var PROJECTION : int = 5889
var SRC_ALPHA : int = 770
var ONE_MINUS_SRC_ALPHA : int = 771
var MODELVIEW : int = 5888
var VERTEX_SHADER : int = 35633
var FRAGMENT_SHADER : int = 35632
var FLOAT : int = 5126
var FALSE : int = 0
var ARRAY_BUFFER : int = 34962
var STATIC_DRAW : int = 35044
var TRIANGLES : int = 4
var COMPILE_STATUS : int = 35713
var QUADS : int = 7
//**********
//End constants
//**********

fun clearcolor(r:double,g:double,b:double,a:double) {
    __if_comp__ __C__ {
        simple_passthrough(r = r, g = g, b = b, a = a::) """
        return glClearColor(r,g,b,a);
        """
    }
    return
}

fun clear(mask : int) {
    __if_comp__ __C__ {
    simple_passthrough(mask ::) """
    return glClear(mask);
    """
    }
    return
}

fun viewport(x:int,y:int,width:int,height:int) {
    __if_comp__ __C__ {
    simple_passthrough(x = x, y = y, width = width, height = height::) """
    return glViewport(x,y,width,height);
    """
    }
    return
}

fun matrixmode(mode : int) {
    __if_comp__ __C__ {
    simple_passthrough(mode ::) """
    return glMatrixMode(mode);
    """
    }
    return
}

fun enable(cap : int) {
    __if_comp__ __C__ {
    simple_passthrough(cap ::) """
    return glEnable(cap);
    """
    }
    return
}

fun blendfunc(sfactor : int, dfactor : int) {
    __if_comp__ __C__ {
    simple_passthrough(sfactor, dfactor ::) """
    return glBlendFunc(sfactor, dfactor);
    """
    }
    return
}

fun loadidentity() {
    __if_comp__ __C__ {
    simple_passthrough """
    return glLoadIdentity();
    """
    }
    return
}

fun ortho(left : double, right : double, bottom : double, top : double, nearVal : double, farVal : double) : void {
    __if_comp__ __C__ {
    simple_passthrough(left=left, right=right, bottom=bottom, top=top, nearVal=nearVal, farVal=farVal::) """
    return glOrtho(left, right, bottom, top, nearVal, farVal);
    """
    }
    return
}

fun glewinit() : int {
    __if_comp__ __C__ {
    simple_passthrough """
    return glewInit();
    """
    }
    return 0
}

fun genbuffers(size : int, buffers : int*) {
    __if_comp__ __C__ {
    simple_passthrough(size=size,buffers=buffers::) """
    glGenBuffers(size, buffers);
    """
    }
    return
}

fun bindbuffer(target : int, buffer : int) : void {
    __if_comp__ __C__ {
    simple_passthrough(target = target, buffer = buffer ::) """
    glBindBuffer(target, buffer);
    """
    }
    return
}

fun bufferdata(target : int, size : int, data : float*, usage : int) {
    __if_comp__ __C__ {
    simple_passthrough(target = target, size = size, data = data, usage = usage::) """
    glBufferData(target, size, (void*)data, usage);
    """
    }
    return
}

fun geterror() : int {
    __if_comp__ __C__ {
    simple_passthrough """
    return glGetError();
    """
    }
    return 0
}

fun vertexattribpointer(index : int, size : int, type : int, normalized : int, stride : int, pointer : int) {
    __if_comp__ __C__ {
    simple_passthrough(index = index, size = size, type = type, normalized = normalized, stride = stride, pointer = pointer::) """
    glVertexAttribPointer(index, size, type, (char)normalized, stride, pointer);
    """
    }
    return
}

fun enablevertexattribarray(index : int) {
    __if_comp__ __C__ {
    simple_passthrough(index = index::) """
    glEnableVertexAttribArray(index);
    """
    }
    return
}

fun createshader(shaderType : int) : int {
    __if_comp__ __C__ {
    simple_passthrough(shaderType = shaderType::) """
    return glCreateShader(shaderType);
    """
    }
    return 0
}

fun createprogram() : int {
    __if_comp__ __C__ {
    simple_passthrough """
    return glCreateProgram();
    """
    }
    return 0
}

fun shadersource(shader : int, count : int, string : char**, length : int*) {
    __if_comp__ __C__ {
    simple_passthrough(shader = shader, count = count, string = string, length = length::) """
    glShaderSource(shader, count, (const char**)string, length);
    """
    }
    return
}

fun compileshader(shader : int) {
    __if_comp__ __C__ {
    simple_passthrough(shader = shader ::) """
    glCompileShader(shader);
    """
    }
    return
}

fun attachshader(program : int, shader : int) {
    __if_comp__ __C__ {
    simple_passthrough(program = program, shader = shader ::) """
    glAttachShader(program, shader);
    """
    }
    return
}

fun bindattriblocation(program : int, index : int, name : char*) {
    __if_comp__ __C__ {
    simple_passthrough(program = program, index = index, name = name ::) """
    glBindAttribLocation(program, index,  name);
    """
    }
    return
}

fun linkprogram(program : int) {
    __if_comp__ __C__ {
    simple_passthrough(program = program ::) """
    glLinkProgram(program);
    """
    }
    return
}

fun useprogram(program : int) {
    __if_comp__ __C__ {
    simple_passthrough(program = program ::) """
    glUseProgram(program);
    """
    }
    return
}

fun deleteshader(shader : int) {
    __if_comp__ __C__ {
    simple_passthrough(shader = shader ::) """
    glDeleteShader(shader);
    """
    }
    return
}

fun deleteprogram(program : int) {
    __if_comp__ __C__ {
    simple_passthrough(program = program ::) """
    glDeleteProgram(program);
    """
    }
    return
}

fun vertex3f(x : float, y : float, z : float) : void {
    __if_comp__ __C__ {
    simple_passthrough(x = x, y = y, z = z ::) """
    glVertex3f(x,y,z);
    """
    }
    return
}

fun color3f(x : float, y : float, z : float) : void {
    __if_comp__ __C__ {
    simple_passthrough(x = x, y = y, z = z ::) """
    glColor3f(x,y,z);
    """
    }
    return
}

fun begin() : void {
    __if_comp__ __C__ {
    simple_passthrough """
    glBegin(GL_TRIANGLES);
    """
    }
    return
}

fun end() : void {
    __if_comp__ __C__ {
    simple_passthrough """
    glEnd();
    """
    }
    return
}

fun drawarrays(mode : int, first : int, count : int) {
    __if_comp__ __C__ {
    simple_passthrough(mode, first, count ::) """
    glDrawArrays(mode, first, count);
    """
    }
    return
}

fun getshaderiv(shader : int, type : int, error : int*) {
    __if_comp__ __C__ {
    simple_passthrough(shader, type, error ::) """
    glGetShaderiv(shader, type, error);
    """
    }
    return
}

fun getshaderinfolog(shader : int, size : int, buffer : char*) {
    __if_comp__ __C__ {
    simple_passthrough(shader, size, buffer ::) """
    glGetShaderInfoLog(shader, size, NULL, buffer);
    """
    }
    return
}

fun getuniformlocation(shader : int, name : char*) : int {
    __if_comp__ __C__ {
    simple_passthrough(shader, name ::) """
    return glGetUniformLocation(shader, (const char*)name);
    """
    }
    return 0
}

fun uniform3f(location : int, vals : float*) {
    __if_comp__ __C__ {
    simple_passthrough(location, vals ::) """
    glUniform3f(location, vals[0], vals[1], vals[2]);
    """
    }
    return
}
